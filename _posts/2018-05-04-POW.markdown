---
layout:     post
title:      "从POW说起"
date:       2018-05-04
author:     "K"
header-img: "img/post-bg-markdown.jpg"
tags:
    - Blockchain
---

# 从Pow说起

比特币网络中挖矿的本质就是寻找一个随机数（nNonce）使得满足计算公式的哈希值小于当前难度要求，可简化为公式如下：

下面先从区块头的字段说起，区块头包括了4个字节的版本号（int32_t nVersion），32个字节的前一个区块的区块头hash值（uint256 hashPrevBlock），32字节的Merkle树根（uint256 hashMerkleRoot），4字节的时间戳（uint32_t nTime），4字节的本区块难度（uint32_t nBits），以及4字节的的随机数（uint32_t nNonce）。

Merkle 树根的计算在[上一篇文章](https://kangfeihk.com/2018/04/16/Merkle-Tree/)中已经写过。这里先关注 nBits 这个字段，决定全网挖矿的难度，每2016个区块重新调整，调整算法固定。

## Bits、target、difficulty 的关系

下面着重介绍这三者之间的关系。

首先说 Target（256-bit number），在挖矿过程中，新生成的区块头哈希（SHA-256）值必须小于等于 target，才能被网络接受。target 越小，代表挖矿的难度越大。

在比特币源码中可以创世区块的这句代码：

``` C++
// src/chainparams.cpp
genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);
```

Bits = Current target in compact format，Bits 初始设置为 0x1d00ffff，这是一种 ‘compact’ 格式，前2位十六进制数字为幂，接下来得6位为系数。在这个区块里，0x1d为幂（exponent ），而0x00ffff为系数（coefficient），难度的计算公式：

> target = coefficient * 256^(exponent – 3)

换一种方式，十六进制数 0x1d00ffff 可分成两部分:
```
- 0x1d -- number of bytes in a target
- 0x00ffff -- target prefix
```
则可表示为：`0x00ffff0000000000000000000000000000000000000000000000000000`（表示29个字节长）
因此，0x1d00ffff 表示的最大 target，32 字节中前面 4 个字节为 0.

再来说说 Difficulty，Difficulty 衡量难度值，计算公式如下：

> difficulty factor = difficulty_1_target / current_target

其中 difficulty_1_target 为之前提到的最大 target，也就是 Difficulty 为 1 时的值，这里有一个区别，矿池难度1 和 比特币客户端难度1 不同，前者除了前32位为0，后面保留全F，而在比特币客户端中为 `0x00000000ffff0000000000000000000000000000000000000000000000000000`

比特币网络设定每10分钟出一次块，每2016次出块，也就是理想状态下是两个星期，需要检查一下所用真实出块时间和理想时间的比值。然后重新调整出块难度。

在比特币源码 src/pow.cpp 中 CalculateNextWorkRequired 函数中，有如下代码段：

``` C++
if (nActualTimespan < params.nPowTargetTimespan/4)
    nActualTimespan = params.nPowTargetTimespan/4;
if (nActualTimespan > params.nPowTargetTimespan*4)
    nActualTimespan = params.nPowTargetTimespan*4;
```
可见在单次调整中，限制最大幅度为4倍，因此，如果出现算力大幅度变化的情况可能需要数次调整才能达到平衡状态。

总的来说，比特币每一次挖矿就是对头文件中的80个字节连续进行两次SHA256运算，其中区块版本号，只有在升级时候才会改变，hashPrevBlock 为前一个区块决定，nBits 由全网算力决定，剩下三个较为灵活，nNonce 为随机数，nTime 为时间，也有一定合理范围，hashMerkleRoot 由区块中包含的交易计算所得，即使改变顺序也会影响最终结果。



--------


> 参考：<br>
> [Difficulty Explanation](https://en.bitcoin.it/wiki/Difficulty)：From Bitcoin Wiki <br>
> [How to calculate new “bits” value?](https://bitcoin.stackexchange.com/questions/2924/how-to-calculate-new-bits-value)：From stackoverflow <br>
> [Trying to understand nbits value from stratum protocol](https://stackoverflow.com/questions/22059359/trying-to-understand-nbits-value-from-stratum-protocol) <br>
> [Proof-of-work difficulty increasing](http://satoshi.nakamotoinstitute.org/posts/bitcointalk/43/#selection-5.0-5.35)：From Satoshi Nakamoto Institute <br>
> [理解与计算比特币难度值Difficulty](https://yushuangqi.com/blog/2017/understand-bitcoin-difficulty.html) <br>
> [深度解析挖矿的逻辑和技术实现](https://bitcointalk.org/index.php?topic=3117000.0) <br>
> [比特币源码研读(5)数据结构-共识(Consensus)](https://www.jianshu.com/p/e6ce821fe0a9) <br>
> 比特币源码：[consensus.h](https://github.com/bitcoin/bitcoin/blob/master/src/consensus/consensus.h)、[params.h](https://github.com/bitcoin/bitcoin/blob/master/src/consensus/params.h)、[pow.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/pow.cpp) <br>
> [MasterBitcoin2 相关章节 中文翻译](https://github.com/tianmingyun/MasterBitcoin2CN/blob/master/ch10.md):《精通比特币》第二版 [区块链研究社云天明联合出品](https://github.com/tianmingyun/MasterBitcoin2CN) <br>
> [Compute by yourself Block #277316](https://blockchain.info/block/0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4) <br>