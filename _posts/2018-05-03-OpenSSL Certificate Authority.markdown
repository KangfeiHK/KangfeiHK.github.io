---
layout:     post
title:      "OpenSSL Certificate Authority"
date:       2018-05-03
author:     "K"
header-img: "img/post-bg-markdown.jpg"
tags:
    - 密码学
    - OpenSSL
    - Linux
---

前一篇文章 [OpenSSL 入门指南](https://kangfeihk.com/2018/05/02/OpenSSL/) 介绍了 OpenSSL 的基本用法，使用命令行和调用加密算法库操作常见哈希、加密算法。这篇文章将对围绕 Certificate Authority，操作生成证书、自签名、签发证书、、查看证书、吊销证书等常见功能。

本文重点参考以下三篇文章：

- [OpenSSL Certificate Authority](https://jamielinux.com/docs/openssl-certificate-authority/introduction.html)
- [openssl 必知必会](https://zzyongx.github.io/blogs/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs.html)
- [钥基础设施（四）：证书签发（以 OpenSSL 为例）](https://halelu.github.io/2017/02/Public-Key-Infrastructure-4/)

<!-- TOC -->

- [基础知识](#基础知识)
    - [Certificate Signing Requests (CSRs)](#certificate-signing-requests-csrs)
    - [生成 CSR](#生成-csr)
        - [直接生成 CSR 和私钥](#直接生成-csr-和私钥)
        - [使用已有私钥生成 CSR](#使用已有私钥生成-csr)
        - [使用已有证书生成新的 CSR](#使用已有证书生成新的-csr)
    - [生成 SSL 证书](#生成-ssl-证书)
        - [生成自签名证书](#生成自签名证书)
        - [根据已有私钥生成自签名证书](#根据已有私钥生成自签名证书)
        - [根据已有私钥和 CSR 生成自签名证书](#根据已有私钥和-csr-生成自签名证书)
    - [查看证书](#查看证书)
        - [查看校验 CSR](#查看校验-csr)
        - [查看自签名证书](#查看自签名证书)
        - [查看 CA 签名的证书](#查看-ca-签名的证书)
    - [私钥](#私钥)
        - [创建私钥](#创建私钥)
        - [验证私钥](#验证私钥)
        - [验证证书、CSR 和私钥一致](#验证证书csr-和私钥一致)
        - [加/解密私钥](#加解密私钥)
    - [验证证书格式](#验证证书格式)
        - [PEM 转 DER](#pem-转-der)
        - [DER 转 PEM](#der-转-pem)
        - [PEM 转 PKCS7](#pem-转-pkcs7)
        - [PKCS7 转 PEM](#pkcs7-转-pem)
        - [把私钥和证书打包成 PKCS12](#把私钥和证书打包成-pkcs12)
        - [把 PKCS12 转成 PEM](#把-pkcs12-转成-pem)
- [完整示例](#完整示例)
    - [创建根证书](#创建根证书)
        - [准备目录](#准备目录)
        - [配置文件](#配置文件)
        - [生成根证书私钥](#生成根证书私钥)
        - [创建根证书](#创建根证书-1)
        - [验证根证书](#验证根证书)
    - [创建中间 CA](#创建中间-ca)
        - [生成根证书请求文件](#生成根证书请求文件)
        - [自签发根证书](#自签发根证书)
    - [用根证书签发 server 端证书](#用根证书签发-server-端证书)
        - [生成服务端私钥](#生成服务端私钥)
        - [生成证书请求文件](#生成证书请求文件)
        - [利用根证书签发服务端证书](#利用根证书签发服务端证书)

<!-- /TOC -->


### 基础知识

- CSR：Certificate Signing Requests
作用：
- CRL：certificate revocation list
作用：
- OCSP：Online Certificate Status Protocol
作用：

#### Certificate Signing Requests (CSRs)

如果想从 CA（具有资质的商业公司，签发 SSL 证书，是 PKI 系统的一部分）处获得证书，需要生成 CSR。CSR 中包含了公钥和其它信息，CA 签发的证书中也包含了这两项信息。CSR 其它信息中最重要的是 CN（Common Name），它应该等于 FQDN（Fully Qualified Domain Name）。使用 opesl 命令生成 CSR 时，会提示填写这些信息。

为了理解自签名证书，必须理解 PKI 系统。假设 A 想和 B 建立 SSL 连接，A 需要获取 B 的证书（证书里面包含了 B 的公钥），A 如何确定这个证书的确是 B 的，没有在传输过程中被篡改呢？如果 B 的证书是 CA 公司签发的，只需要用 CA 公司的证书验证一下就行了，那 CA 公司的证书又如何获取呢？如何保证 CA 公司的证书没有被纂改呢？答案是没有办法，只能选择信任。CA 公司的证书一般内置在 A 系统中。

所谓 CA 公司签名，其实是拿 CA 公司的私钥对 B 的公钥做签名，拿 CA 公司的公钥（在 CA 的证书中，可以公开获取）验证 B 的公钥签名。自签名证书说白了就是自己验证自己。需要把自签名证书手动添加到 A 系统中。

#### 生成 CSR

下面介绍三种方式生成 CSR


##### 直接生成 CSR 和私钥

```bash
# -newkey rsa:bits  generate a new RSA key of 'bits' in size
# -nodes            don't encrypt the output key
# -keyout arg       file to send the key to
# -out arg          output file
$ openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr
```

##### 使用已有私钥生成 CSR

```bash
# -key file      use the private key contained in file (already exist)
# -new           new request.
$ openssl req -key domain.key -new -out domain.csr
```

##### 使用已有证书生成新的 CSR

```bash
# -in arg         - input file - default stdin (domain.crt 是已经存在的证书)
# -signkey arg    - self sign cert with arg (domain.key 是已经存在的私钥)
# -x509toreq      - output a certification request object
# -out arg        - output file - default stdout
$ openssl x509 -in domain.crt -signkey domain.key -x509toreq -out domain.csr
```

#### 生成 SSL 证书

##### 生成自签名证书

```bash
# -newkey rsa:bits  generate a new RSA key of 'bits' in size
# -nodes            don't encrypt the output key
# -keyout arg       file to send the key to
# -x509             output a x509 structure instead of a cert. req. (指示创建自签名证书)
# -days             number of days a certificate generated by -x509 is valid for.
# -out arg          output file
$ openssl req -newkey rsa:2048 -nodes -keyout domain.key -x509 -days 365 -out domain.crt
```

##### 根据已有私钥生成自签名证书

```bash
# -key file      use the private key contained in file (domain.key already exist)
# -new           new request.
# -x509             output a x509 structure instead of a cert. req.
# -days             number of days a certificate generated by -x509 is valid for.
# -out arg          output file
$ openssl req -key domain.key -new -x509 -days 365 -out domain.crt
```

##### 根据已有私钥和 CSR 生成自签名证书

```bash
# -in arg         - input file - default stdin (domain.crt 是已经存在的证书)
# -signkey arg    - self sign cert with arg (domain.key 是已经存在的私钥)
# -req            - input is a certificate request, sign and output.
# -days arg       - How long till expiry of a signed certificate - def 30 days
# -out arg        - output file - default stdout
$ openssl x509 -signkey domain.key -in domain.csr -req -days 365 -out domain.crt
```

#### 查看证书

##### 查看校验 CSR

```bash
# -text          text form of request
# -verify        verify signature on REQ
# -in arg        input file
$ openssl req -text -noout -verify -in domain.csr
```

##### 查看自签名证书

```bash
# -text          text form of request
# -verify        verify signature on REQ
# -in arg        input file
$ openssl req -text -noout -verify -in domain.crt
```

##### 查看 CA 签名的证书

```bash
# -text         text form of request
# -verbose      Print extra information about the operations being performed.
# -CAfile file  A file of trusted certificates. The file should contain one or more certificates in PEM format. (ca.crt 是 CA 的证书)
$ openssl verify -verbose -CAFile ca.crt domain.crt
```

命令详细请参考 [openssl req](https://www.openssl.org/docs/manmaster/man1/openssl-req.html)、[openssl x509](https://www.openssl.org/docs/manmaster/man1/openssl-x509.html)、[openssl verify](https://www.openssl.org/docs/manmaster/man1/openssl-verify.html)

#### 私钥

##### 创建私钥

```bash
# genrsa - generate an RSA private key
# -out      filename
# -des3     encrypt the private key with specified cipher before outputting it.
# 2048      the size of the private key to generate in bits. This must be the last option specified. The default is 512.
$ openssl genrsa -des3 -out domain.key 2048
```

##### 验证私钥

```bash
# rsa -             RSA key processing tool
# -check            this option checks the consistency of an RSA private key.
# -in filename      This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.
$ openssl rsa -check -in domain.key
```

##### 验证证书、CSR 和私钥一致

```bash
# -modulus          this option prints out the value of the modulus of the key.
# -noout            this option prevents output of the encoded version of the key.
# -in filename      This specifies the input filename to read a key from or standard input if this option is not specified. If the key is encrypted a pass phrase will be prompted for.
# 这三个命令的输出一样
$ openssl rsa -noout -modulus -in domain.key | openssl md5
$ openssl x509 -noout -modulus -in domain.crt | openssl md5
$ openssl req -noout -modulus -in domain.csr | openssl md5
```

##### 加/解密私钥

```bash
$ openssl rsa -des3 -in domain.key -out encrypted-domain.key
$ openssl rsa -in encrypted-domain.key -out domain.key
```

#### 验证证书格式

##### PEM 转 DER

```bash
$ openssl x509 -in domain.crt -outform der -out domain.der
```

##### DER 转 PEM

```bash
$ openssl x509 -inform der -in domain.der -out domain.crt
```

##### PEM 转 PKCS7

```bash
#  把 domain.crt ca-chain.crt 放到一个文件中
$ openssl crl2pkcs7 -nocrl -certfile domain.crt -certfile ca-chain.crt -out domain.p7b
```

##### PKCS7 转 PEM

```bash
# domain.crt 中包含了两个证书
$ openssl pkcs7 -in domain.p7b -print_certs -out domain.crt
```

##### 把私钥和证书打包成 PKCS12

```bash
# 该命令会提示输入密码，留空不设置
$ openssl pkcs12 -inkey domain.key -in domain.crt -export -out domain.pfx

如果有多级 CA 证书 cat domain.crt intermediate.crt [intermediate2.crt] ... rootCA.crt > cert-chain.txt openssl pkcs12 -inkey domain.key -in cert-chain.txt -export -out domain.pkcs12

keytool 是 java 工具，把 PKCS12 转成 keystore，用于 java 软件，jetty，tomcat 等。 keytool -importkeystore -srckeystore domain.pfx -srcstoretype PKCS12 -destkeystore keystore

使用 keytool 创建 keystore keytool -keystore keystore -alias jetty -genkey -keyalg RSA -sigalg SHA256withRSA
```

##### 把 PKCS12 转成 PEM

```bash
$ openssl pkcs12 -in domain.pfx -nodes -out domain.combined.crt
```

--------


### 完整示例


#### 创建根证书

##### 准备目录

```bash
# 在个人主目录下新建目录
$ cd ~
$ mkdir -p CA/root

# 创建目录结构
$ cd /CA/root
$ mkdir certs crl newcerts private
$ chmod 700 private
$ touch index.txt
$ echo 1000 > serial
```

其中 index.txt 和 serial 文件记录 signed certificates. 另外 certs 保存生成的证书、crl 保存撤销证书，newcerts 备份已签发的证书，private 保存私钥

##### 配置文件

拷贝配置如下，至 /CA/root/openssl.cnf

```
# OpenSSL root CA configuration file.
# Copy to `/root/ca/openssl.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = /root/ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = GB
stateOrProvinceName_default     = England
localityName_default            =
0.organizationName_default      = Alice Ltd
organizationalUnitName_default  =
emailAddress_default            =

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
```

注意，在实际使用时，需要进行适当修改，例如 CA_default 中的 dir 路径因实际路径而异。参数具体解释见原文

##### 生成根证书私钥

```bash
$ cd /CA/root
openssl genrsa -aes256 -out private/ca.key.pem 4096

Enter pass phrase for private/ca.key.pem:
Verifying - Enter pass phrase for private/ca.key.pem:

# 修改权限
chmod 400 private/ca.key.pem
```

##### 创建根证书

> 在任何时候使用 req 工具，必须通过 -config 指定配置文件，否则将使用默认配置文件 /etc/pki/tls/openssl.cnf

使用刚生成的 ca.key.pem 创建根证书 ca.cert.pem

```bash
$ cd /CA/root

$ openssl req -config openssl.cnf -key private/ca.key.pem
    -new -x509 -days 7300 -sha256 -extensions v3_ca -out certs/ca.cert.pem

Enter pass phrase for ca.key.pem: secretpassword
You are about to be asked to enter information that will be incorporated
into your certificate request.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name []:Guangdong
Locality Name []:Shenzhen
Organization Name []:Alice Ltd
Organizational Unit Name []:Alice Ltd Certificate Authority
Common Name []:Alice Ltd Root CA
Email Address []:

$ chmod 444 certs/ca.cert.pem
```

##### 验证根证书

```bash
$ openssl x509 -noout -text -in certs/ca.cert.pem

# 输出如下：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 12102456309925103173 (0xa7f48fe46ec54645)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=CN, ST=Guangdong, L=Shenzhen, O=Alice Ltd, OU=Alice Ltd Certificate Authority, CN=Alice Ltd Root CA
        Validity
            Not Before: Aug  2 02:41:29 2018 GMT
            Not After : Jul 28 02:41:29 2038 GMT
        Subject: C=CN, ST=Guangdong, L=Shenzhen, O=Alice Ltd, OU=Alice Ltd Certificate Authority, CN=Alice Ltd Root CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:b4:64:b6:d0:6b:bf:df:1b:01:be:58:d9:82:1b:
                    e8:63:22:82:c5:c9:30:b9:95:72:d5:19:dc:d9:7c:
                    fe:c2:d5:e4:bc:e6:59:23:c9:95:dd:3d:ed:eb:42:
                    e9:56:7e:02:52:58:de:9c:c2:4e:c9:9a:ad:ec:53:
                    52:77:09:61:20:4f:bf:2a:8f:27:83:4e:d2:e5:b7:
                    3c:64:42:0a:86:a7:03:2b:df:d8:b5:f6:da:28:1e:
                    f4:14:33:bb:8e:e4:b1:f5:97:c0:87:e7:34:59:d0:
                    b9:ae:44:45:12:29:d0:db:c7:c7:eb:c2:57:a9:5c:
                    03:08:f6:5e:bf:96:94:a5:d0:6a:57:d3:fd:24:8b:
                    1a:27:bd:2c:bf:07:08:d4:17:2d:52:8d:32:a3:33:
                    0b:39:d3:31:84:08:0f:07:39:db:a2:20:49:87:54:
                    a1:e3:44:b3:f4:fb:da:b0:0a:3f:d7:b9:29:ad:14:
                    02:3a:9d:ac:37:d6:95:c6:ab:05:2d:54:f6:c5:18:
                    2e:26:b6:11:a3:69:13:5d:12:6c:62:1e:53:6b:01:
                    79:07:5e:4c:01:ab:0d:bb:b1:17:77:4c:94:1e:43:
                    de:93:18:3e:c8:1e:06:20:33:48:c7:36:1e:c8:cb:
                    bf:cc:70:bd:d0:7f:f6:8f:e5:5b:f6:cd:f3:e6:31:
                    d1:0c:c3:e4:05:6a:61:d8:1e:53:f0:de:15:0b:27:
                    ab:36:19:8a:1f:66:c0:93:5d:da:fc:fb:ef:47:39:
                    a6:6f:89:2e:8e:d7:b0:35:d4:30:e6:e3:95:bb:de:
                    51:e2:25:2c:bc:9d:bb:6a:fc:32:47:b4:a4:7c:6f:
                    b0:15:ea:10:34:e7:60:d9:14:e2:2d:96:8d:55:94:
                    13:de:21:07:a5:e6:2e:46:79:46:6e:35:0d:e8:b4:
                    70:fa:f7:3c:ac:c7:6b:dc:5a:d0:67:c7:a5:42:9f:
                    33:44:8e:15:b2:83:96:75:8d:2c:4e:6f:76:31:62:
                    20:9b:69:4e:23:13:64:8b:fb:c1:7e:07:df:a5:46:
                    eb:cb:5b:6b:00:e5:7d:01:c6:36:44:77:22:27:0b:
                    ae:27:78:46:e0:3a:38:7a:99:b1:ec:32:c5:7e:75:
                    c1:ea:21:46:d0:2b:39:94:3f:7c:10:eb:89:ec:87:
                    1f:f7:5e:b4:7b:3a:4d:da:fc:98:b2:41:30:7d:83:
                    91:18:43:87:68:d4:ea:f7:16:44:0e:f3:de:76:ec:
                    0a:b1:4c:3d:7e:7a:07:45:1c:e9:6e:ac:90:11:21:
                    ac:98:df:03:81:77:41:4f:c6:8a:2d:3f:af:16:94:
                    bb:2b:a8:88:ef:16:ae:a4:d0:ee:66:f3:da:99:37:
                    84:6f:2d
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier: 
                59:13:E1:F5:DA:EE:7E:69:E9:5D:1A:1E:C3:87:5B:BA:AE:01:CF:9E
            X509v3 Authority Key Identifier: 
                keyid:59:13:E1:F5:DA:EE:7E:69:E9:5D:1A:1E:C3:87:5B:BA:AE:01:CF:9E

            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Digital Signature, Certificate Sign, CRL Sign
    Signature Algorithm: sha256WithRSAEncryption
         a5:1f:41:21:e1:e7:46:15:1a:64:ef:d6:32:72:95:9c:df:08:
         10:1a:f6:7a:a5:cb:36:6a:ee:70:97:4b:94:9e:38:bf:41:90:
         96:65:94:4a:8f:2e:7a:69:19:5e:2b:2a:a2:da:86:bb:fc:04:
         1d:ae:65:af:e3:c6:77:ce:c9:01:0b:90:6e:53:43:ab:79:e1:
         fb:2c:ec:7f:e1:1a:32:1a:da:e3:ae:cb:92:76:43:77:64:bc:
         b5:9a:89:c9:4f:d3:9d:fe:e3:89:89:bf:b7:49:0b:85:c0:f5:
         32:63:60:50:20:67:0d:a8:2b:23:b9:e5:11:58:55:49:1a:ac:
         6b:e3:eb:65:8c:ff:9d:19:14:69:c5:56:56:a2:6c:a1:0a:b5:
         98:08:f6:72:2e:e2:29:f6:cb:1a:bd:cd:c5:d7:1b:42:24:c9:
         9e:92:b2:5b:a7:e4:7e:0a:24:64:8a:81:f2:3d:06:5b:bf:df:
         7d:ca:79:08:89:a3:f7:23:17:d8:3f:28:cd:2f:91:45:f7:09:
         f8:50:d7:b5:89:98:a8:b1:fd:c5:17:11:b1:2d:4f:8e:6a:c2:
         0e:36:fc:90:8c:bb:e6:23:3b:b4:d8:2e:03:41:8d:ae:27:2c:
         c8:bf:d1:2a:3e:43:c2:e4:04:99:d3:22:4e:f1:2f:61:7d:0d:
         e8:8e:1c:5b:30:04:03:b9:4d:d7:4d:8a:a8:29:c4:e8:1f:5d:
         87:ba:f3:3d:1b:53:57:be:36:a7:47:d1:a6:8f:4b:15:ec:2a:
         15:ad:bc:41:cb:19:10:ce:c4:50:a7:71:3c:de:53:92:76:4d:
         20:a9:09:95:8d:cd:c0:5a:e5:90:6b:44:91:69:76:ee:f6:5a:
         ee:6d:93:f7:a8:45:bf:80:4c:35:a5:6f:d9:c7:5a:42:5c:09:
         48:9c:07:e1:2d:6c:c6:f0:d1:07:ca:a2:0c:f0:7c:40:de:9c:
         f7:4d:68:42:0f:a2:93:bf:91:f8:0b:12:66:f1:b8:95:84:c8:
         71:31:27:c2:09:ad:9f:03:e5:8b:92:5c:03:e2:dd:c7:87:75:
         24:8f:91:d6:f4:03:df:b1:85:1f:74:19:7e:19:c1:39:55:96:
         65:7f:21:ab:ed:18:88:9a:76:1e:9e:d3:b2:ae:a1:8d:ff:6c:
         fc:ec:7b:85:49:86:70:6f:7b:c4:7d:99:4b:08:91:3f:b2:43:
         06:5c:61:a3:60:7c:06:f9:7e:21:44:1e:ca:94:57:40:0d:94:
         24:5b:2d:8f:8e:f6:1b:4a:5f:18:cc:ae:0a:7e:5a:64:94:c3:
         ae:66:dd:ec:5b:1f:da:11:38:e7:47:17:b0:fe:3d:5c:5a:1f:
         f6:74:ad:e0:72:29:a5:9e
```

可以看到输出中包括以下几个部分：

- Signature Algorithm
- Validity
- Public-Key bit length
- Issuer：which is the entity that signed the certificate
- Subject：which refers to the certificate itself

The Issuer and Subject are identical as the certificate is self-signed. Note that all root certificates are self-signed.

The output also shows the X509v3 extensions. We applied the v3_ca extension, so the options from [ v3_ca ] should be reflected in the output.

#### 创建中间 CA

---------

```bash
# 使用 RSA 算法生成 2048 位长度的私钥
# 并用 -aes256 或者 -des3 对 RSA 私钥进行加密
$ openssl genrsa -des3 -out rootCA.key 2048

# 也可以使用不加密
$ openssl genrsa -out private/rootCA.key 2048

# 使用密钥生成根 SSL 证书，有效期 1 年，过程中会提示输入可选信息
# req 表示执行证书签发命令
# new 表示新证书签发请求
# key 指定证书私钥路径
# out 表示输出的证书请求文件的位置
$ openssl req -x509 -new -key rootCA.key -days 365 -out rootCA.crt

# 可选信息如下（示例）
Country Name (2 letter code) []:CN
State or Province Name (full name) []:Guangdong
Locality Name (eg, city) []:Shenzhen
Organization Name (eg, company) []:KA Technology Co. Ltd.
Organizational Unit Name (eg, section) []:KA Technology Co. Ltd.
Common Name (eg, fully qualified host name) []:KA Technology Root Certificate

# 查看 req 帮助
$ openssl req -help

# 查看证书信息
$ openssl x509 -noout -text -in ca.crt
```

##### 生成根证书请求文件

```bash
# req 表示执行证书签发命令
# new 表示新证书签发请求
# key 指定证书私钥路径
# out 表示输出的证书请求文件的位置
# subj 表示证书相关的用户信息
$ openssl req -new -key rootCA.key -days 365 -out rootCA.crt -subj "/C=CN/ST=Guangdong/L=Shenzhen/O=KA Technology Co. Ltd./OU=KA Technology Co. Ltd./CN=KA Technology Root Certificate"
```

##### 自签发根证书

```bash
# x509 表示生成 x509 格式证书
# req 表示输入 csr 文件
# days 表示证书有效期 (天)
# sha1 表示证书的摘要使用 sha1
# extensions 表示安装 openssl.conf 文件中配置的 v3_ca 项添加拓展
# extfile 表示配置文件，下方有提供。
# signkey 表示签发证书使用的私钥

$ openssl x509 -req -days 365 [-sha1] [-extfile openssl.cnf] [-extensions v3_ca] -signkey ca_private.pem -in ca.csr -out ca.crt
```

#### 用根证书签发 server 端证书

##### 生成服务端私钥

```bash
$ openssl genrsa -out server_private.pem 2048
```

##### 生成证书请求文件

```bash
$ openssl req -new -key server_private.pem -out server.csr -subj "/C=CN/ST=Guangdong/L=Shenzhen/O=Zhenai/OU=Java/CN=HttpProxy"`
```

##### 利用根证书签发服务端证书

```bash
# CA 指定 ca 证书
# CAkey 指定证书的私钥
# CAserial 指定证书序列号文件
# 表示创建证书序列号文件 (即上方提到的 serial 文件)，创建的序列号文件默认名称为 - CA，指定的证书名称后加上. srl 后缀。（注意这里的是 - extensions v3_req）
$ openssl x509 -req -days 365 [-sha256] [-extfile openssl.conf] [-extensions v3_req] -CA ca.crt -CAkey ca_private.pem -CAserial ca.srl -CAcreateserial -in server.csr -out server.crt
```

CSR 文件

```
mkdir rootCA
cd rootCA
mkdir newcerts private conf requests

touch index.txt
echo unique_subject = yes > index.txt.attr
echo 01 > serial

openssl genrsa -out private/ca.key 2048

openssl req -new -key private/ca.key -out ca.crt

openssl req -x509 -key private/ca.key -out ca.crt -config conf/default.cnf
```

```
cd ..
mkdir secondCA
cd secondCA
mkdir newcerts private conf requests
touch index.txt
echo unique_subject = yes > index.txt.attr
echo 01 > serial

openssl genrsa -out private/ca.key 2048

openssl req -new -key private/ca.key -out ../rootCA/requests/secondCA.csr -config conf/default.cnf

cd ../rootCA
openssl ca -in requests/secondCA.csr -out ../secondCA/ca.crt -config conf/default.cnf
````

------------

